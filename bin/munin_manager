#!/usr/bin/env ruby

require 'rubygems'
require 'ruby-debug'

require 'optparse'
require 'ostruct'
require "#{File.dirname(__FILE__)}/../lib/munin_manager"

options = OpenStruct.new
options.plugin_dir = "/etc/munin/plugins"

parser = OptionParser.new do |opts|
  opts.banner = "Usage: munin_manager [options]"
  opts.separator ""
  
  opts.separator "PLUGIN_NAME is of the form <plugin>[.<symlink name>]"
  opts.separator ""
  
  opts.on("-l", "--list", "List available plugins to install") do
    buffer = []
    buffer << "Available Plugins"
    buffer << "================="
    buffer << ""
    
    MuninManager::Plugins.each do |plugin|
      buffer << plugin.plugin_name
    end
    
    buffer << ""
    puts buffer.join("\n")
  end
  
  opts.on("-s", "--show PLUGIN_NAME", "Shows details about a plugin") do |name|
    begin
      puts MuninManager::Plugins[name].help_text
    rescue NoMethodError
      STDERR.puts "'%s' plugin was not found" % name
    rescue
      STDERR.puts "No additional information is available about this plugin."
    end
  end
  
  opts.on("-i", "--install PLUGIN_NAME[,PLUGIN_NAME]", Array,
    "Installs a plugin by creating a symlink in '%s'" % options.plugin_dir) do |names|
      options.action = :install
      options.plugin_names = names
  end
  
  opts.on("-u", "--uninstall PLUGIN_NAME[,PLUGIN_NAME]", Array,
    "Removes plugins from '%s'" % options.plugin_dir,
    "if it is a symlink") do |names|
      options.action = :uninstall      
      options.plugin_names = names
  end

  opts.separator ""
  opts.separator "Options:"

  opts.on("--plugin-dir DIR", "Directory where symlinks will be created when a plugin is installed",
         "(default is '%s'" % options.plugin_dir) do |dir|
    if File.directory?(dir) && File.writable?(dir)
      options.plugin_dir = dir
    else
      STDERR.puts "'%s' does not exist or is not writable" % options.plugin_dir
    end
  end

  opts.on("--force", "Forces the installation or uninstallation of plugins") do
    options.force = true
  end
  
  
end

parser.parse!(ARGV)
options.freeze!

case options.action
when :install, :uninstall
  options.plugin_names.each do |plugin_name|
    plugin_klass = MuninManager::Plugins.search(plugin_name)
    
    unless plugin_klass
      STDERR.puts "ERROR: Matching plugin not found for '%s'" % plugin_name
      exit(1)
    end

    new_options = options.dup
    new_options.install_name = plugin_name

    plugin_klass.send(options.action, new_options)
  end
end
